# 노드(0, 1, 2) : 0 - 1(7), 0 - 2(5)
인접 행렬 : 2차원 배열에 각 노드가 연결된 형태를 기록
* 시간 효율적
/*
    graph = [
        [0, 7, 5],
        [7, 0, INF],
        [5, INF, 0]
    ]
*/

인접 리스트 : 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장
* 공간 효율적
/*
    graph = [[] for _ in range(3)]
    graph[0].append((1, 7))
    graph[0].append((2, 5))

    graph[1].append((0, 7))
    graph[2].append((0, 5))
*/

DFS(Depth - First Search): 깊이 우선 탐색 `O(N)
    * 스택을 사용 : 재귀를 이용
    1. 탐색 시작 노드를 스택에 삽입하고 방문처리를 한다.
    2. 스택에 최상단 노드에 방문하지 않은 인접 노드가 있으면 그 인접 노드를 스택에 넣고 방문 처리를 한다.
        방문하지 않은 인접노드가 없으면 스택에서 최상단 노드를 꺼낸다.
    3. 2번의 과정을 반복한다.

BFS(Breadth First Search): 너비 우선 탐색 `O(N)
    * 큐를 사용 : 일반적인 경우 실제 수행시간이 DFS보다 빠름
    1. 탐색 시작 노드를 큐에 삽입하고 방문처리를 한다.
    2. 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다.
    3. 2번의 과정을 반복한다.

정리

DFS - 스택 - 재귀 사용
BFS - 큐 - 큐 자료구조 사용